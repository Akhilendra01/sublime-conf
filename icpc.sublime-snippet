<snippet>
	<content><![CDATA[
#include<bits/stdc++.h>
using namespace std;

#define int long long int
#define endl "\n"

#define N 1000

#define mod ((int)1e9+7)

//pbds
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;
//find_by_order() order_of_key()

int pow(int a, int b){
	int r=1;
	while(b){
		if(b&1)r=(r*a);
		a=(a*a); b/=2;
	}
	return r;
}

//modpower
int power(int a, int b){
	int r=1;
	while(b){
		if(b&1)r=(r*a)%mod;
		a=(a*a)%mod; b/=2;
	}
	return r;
}
int inv(int x){return power(x, mod-2);};

//Factorial
// int f[(int)1e6+1];
// int factorial(){
// 	f[0]=1;
// 	for(int i=1;i<=1e6;i++)f[i]=(f[i-1]*i)%mod;
// }

//Prime Numbers
// int prime[(int)1e6+1];
// void generate(){
// 	memset(prime, -1, sizeof(prime));
// 	prime[0]=prime[1]=0;
// 	for(int i=2;i<=1e6;i++){
// 		if(prime[i]){
// 			for(int j=i*i;j<=1e6;j+=i)prime[j]=0;
// 		}
// 	}
// }

//Pascal Trianle
// int ncr[N][N];
// void pascal(){
// 	ncr[0][0]=1;
// 	for(int i=1;i<N;i++)for(int j=0;j<=i;j++)
// 		ncr[i][j]=(ncr[i-1][j]+(j>0?ncr[i-1][j-1]:0))%mod;
// }

//DSU
class DSU{
private:
	int n, *par, *rank;
public:
	DSU(int n){
		this->n=n;
		par=(int*)malloc(sizeof(int)*(n+1));
		rank=(int*)malloc(sizeof(int)*(n+1));
		memset(rank, 0, sizeof(rank));
		for(int i=1;i<=n;i++)par[i]=i;
	}
	int find(int x){
		if(par[x]==x)return x;
		return find(par[x]);
	}
	void unionSet(int a, int b){
		a=find(a), b=find(b);
		if(a!=b){
			if(rank[a]<rank[b])swap(a, b);
			par[b]=a;
			if(rank[a]==rank[b])rank[a]++;
		}
	}
};

void update(int idx, int val, vector<int>&bit){
	if(idx==0)return;
	for(;idx<=bit.size();idx+=(idx&(-idx)))bit[idx]+=val;
}
int query(int idx, vector<int>&bit){
	int r=0;
	for(;idx>0;idx-=(idx&(-idx)))r+=bit[idx];
	return r;
}


//Segment Tree
template <typename T>
class SegmentTree{
private: 
    T *st, n, DEAD, (*comb)(int, int);
public:
    SegmentTree(int n, T (*comb)(int, int), int DEAD=0){
        this->n=n, this->comb=comb, this->DEAD=DEAD;
        st=(int*)malloc(sizeof(int)*(this->n)<<2);
        for(int i=0;i<(n<<2);i++)this->st[i]=DEAD;  
    }
    void build(int *a, int lx, int rx, int x){
        if(lx==rx){st[x]=a[lx]; return;}
        int mid=(lx+rx)>>1;
        build(a, lx, mid, (x<<1)+1);
        build(a, mid+1, rx, (x<<1)+2);
        st[x]=this->comb(st[(x<<1)+1], st[(x<<1)+2]);
    }
    void build(int *a){build(a, 0, n-1, 0);}
    T query(int l, int r, int lx, int rx, int x){
        if(rx<l or r<lx)return DEAD;
        if(l<=lx and rx<=r)return st[x];
        int mid=(lx+rx)>>1;
        int q1=query(l, r, lx, mid, (x<<1)+1); 
        int q2=query(l, r, mid+1, rx, (x<<1)+2); 
        return this->comb(q1, q2);
    }
    T query(int l, int r){return query(l, r, 0, n-1, 0);}
    void update(int idx, int val, int lx, int rx, int x){
        if(lx==rx){st[x]=val;   return;}
        int mid=(lx+rx)>>1;
        if(idx<=mid)update(idx, val, lx, mid, (x<<1)+1);
        else update(idx, val, mid+1, rx, (x<<1)+2);
        st[x]=this->comb((x<<1)+1, (x<<1)+2);
    }
    void update(int idx, int val){update(idx, val, 0, n-1, 0);}
};

//Heap
template <typename T>
class Heap{
private:
	T *a;
	int idx, maxSize;
	bool (*comp)(T, T);
public:
	Heap(T* arr, int curSize, int maxSize, bool (*comp)(T, T)){
		a=(T*)malloc(sizeof(T)*maxSize);
		for(int i=0;i<curSize;i++)a[i]=arr[i];
		this->idx=curSize-1;
		this->maxSize=maxSize;
		this->comp=comp;
		this->buildHeap();
	}
	Heap(int maxSize, bool (*comp)(T, T)){
		a=(T*)malloc(sizeof(T)*maxSize);
		this->idx=-1;
		this->maxSize=maxSize;
		this->comp=comp;
	}
private:
	void heapify(int i){
		int large=i;
		int l=(i<<1)+1, r=(i<<1)+2;
		if(l<=idx and !comp(a[large], a[l]))large=l;
		if(r<=idx and !comp(a[large], a[r]))large=r;
		if(large!=i){swap(a[large], a[i]);	heapify(large);}
	}
	void reheapify(int x){
		if(x==0)return;
		int par=(x-1)>>1;
		if(!comp(a[par], a[x])){swap(a[par], a[x]);	reheapify(par);}
	}
	void buildHeap(){for(int i=(idx-1)>>1;i>=0;i--)heapify(i);}	
public:
	void push(T x){
		idx++;	a[idx]=x;
		reheapify(idx);
	}
	void pop(){
		swap(a[0], a[idx]);
		idx--;	heapify(0);
	}
	int size(){return idx+1;}
	bool empty(){return idx==-1;}
	T top(){return a[0];}
};




void solve(){
	$0
}




int32_t main(){
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);

	int t=1;
	// cin>>t;
	while(t--){
		solve();
	}
	
	return 0;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>icpc</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
